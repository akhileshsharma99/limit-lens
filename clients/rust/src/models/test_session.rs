/*
 * Limit Lens API
 *
 * A simple API for testing and visualizing rate limiters in real-time. Monitor request throughput and see how your rate limiting algorithms perform under load.
 *
 * The version of the OpenAPI document: 0.6.0
 * Contact: sharmaninenine@gmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TestSession : Represents a test session for rate limit testing
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestSession {
    /// When the test session was created
    #[serde(rename = "created_at")]
    pub created_at: String,
    /// Unique identifier for the test session
    #[serde(rename = "id")]
    pub id: String,
    /// Name of the test session (optional)
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
}

impl TestSession {
    /// Represents a test session for rate limit testing
    pub fn new(created_at: String, id: String) -> TestSession {
        TestSession {
            created_at,
            id,
            name: None,
        }
    }
}

